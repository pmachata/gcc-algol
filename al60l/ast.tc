/*
 * Copyright (c) 2006 Petr Machata
 * All rights reserved.
 */

%option lang = "C"
%option reentrant
%option prefix = "ast_"
%option state_type = "ast_state_t"
%option no_track_lines
%option force

// ------------------------------------
//   HEADER FILE STUFF
// ------------------------------------

%decls %{
#include <stdio.h>
#include "slist.h"
#include "estring.h"
%}

%decls %end %{
/// Allocate new AST state.  This state is used as an argument across
/// AST calls.
ast_state_t * new_ast_state (void)
  MALLOC_LIKE;

/// Destroy AST state.  This implements `free' semantics, so it's safe
/// to pass NULL.
void delete_ast_state (ast_state_t * state);

/// Safe dynamic cast of NODE to CLASS.
#define ast_as(CLASS, NODE) ((CLASS*)ast_as__ ((NODE), ast_kindof(CLASS)))

/// Do internal checking and see if kinds match.  Return NULL if they
/// don't, otherwise return original `node' pointer.
void * ast_as__ (void * node, int kind);
%}

// ------------------------------------
//   CODE FILE STUFF
// ------------------------------------

%{
#include "ast-tab.h"
#include "logger.h"
#include <string.h>
#include <assert.h>

/// Rerturn padding apropriate for given level.
static char const* padding (int level);
%}

%end %{
/// The type used for ast_state_t with some extre internal fields.
typedef struct ast_state_rep_t
{
  ast_state_t treecc_internal_state_data;
  logger_t * logger;
} ast_state_rep_t;

void
ast_nodefailed (ast_state_t * _state)
{
  ast_state_rep_t * state = (void*)_state;
  log_printf (state->logger, ll_fatal_error, "out of memory during node allocation");
}

ast_state_t *
new_ast_state (void)
{
  ast_state_rep_t * ret = malloc (sizeof (ast_state_rep_t));
  memset (ret, 0, sizeof (ast_state_t));
  ret->logger = new_logger ("ast");
  return (void*)ret;
}

void
delete_ast_state (ast_state_t * _state)
{
  ast_state_rep_t * state = (void*)_state;
  if (state != NULL)
    {
      delete_logger (state->logger);
      free (state);
    }
}

void *
ast_as__ (void * node, int kind)
{
  if (ast_isa__ (node, kind))
    return node;
  else
    return NULL;
}


char const*
padding (int level)
{
  static char const* padding =
    "                                                            "
    "                                                            "
    "                                                            "
    "                                                            "
    "                                                            ";
  if (level > 300)
    level = 300;
  return padding + 300 - level;
}

%}



// ------------------------------------
//   AST MODULES
// ------------------------------------

%include "label.tc"
%include "type.tc"
%include "symbol.tc"
%include "statement.tc"
%include "expression.tc"

/*
 * Local Variables:
 * mode: c
 * c-syntactic-indentation: nil
 * End:
 */
