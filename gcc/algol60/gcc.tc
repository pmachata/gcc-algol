/*
 * Copyright (c) 2006 Petr Machata
 * All rights reserved.
 */

%decls %end %{
void * stmt_dummy_build_generic (stmt_dummy * self);
void * stmt_assign_build_generic (stmt_assign * self);
void * stmt_call_build_generic (stmt_call * self);
void * stmt_container_build_generic (container * self);
%}

%end %{
#ifndef IN_GCC
// Dummy definitions for GENERIC emit.

void ATTRIBUTE_NORETURN
no_gcc_frontend (void)
{
  fprintf (stderr, "GCC frontend not built.\n");
  abort ();
}

void *
stmt_dummy_build_generic (stmt_dummy * self)
{
  no_gcc_frontend ();
}

void *
stmt_assign_build_generic (stmt_assign * self)
{
  no_gcc_frontend ();
}

void *
stmt_call_build_generic (stmt_call * self)
{
  no_gcc_frontend ();
}

void *
stmt_container_build_generic (container * self)
{
  no_gcc_frontend ();
}

void *
expr_int_build_generic (expr_int * self)
{
  no_gcc_frontend ();
}

void *
expr_real_build_generic (expr_real * self)
{
  no_gcc_frontend ();
}

void *
expr_string_build_generic (expr_string * self)
{
  no_gcc_frontend ();
}

void *
expr_bool_build_generic (expr_bool * self)
{
  no_gcc_frontend ();
}

void *
expr_idref_build_generic (expr_idref * self)
{
  no_gcc_frontend ();
}

void *
expr_if_build_generic (expr_if * self)
{
  no_gcc_frontend ();
}

void *
expr_arith_build_generic (expr_arith * self)
{
  no_gcc_frontend ();
}

void *
expr_rel_build_generic (expr_rel * self)
{
  no_gcc_frontend ();
}

void *
expr_log_build_generic (expr_log * self)
{
  no_gcc_frontend ();
}

void *
expr_un_build_generic (expr_un * self)
{
  no_gcc_frontend ();
}

void *
expr_call_build_generic (expr_call * self)
{
  no_gcc_frontend ();
}

#endif
%}

/// Return GENERIC for given statement and all its substatements.
/// This actually returns tree*, but treecc limits us to this hack.
%operation void* stmt_build_generic (statement * self) = { NULL }

/// Return GENERIC for given expression. This actually returns tree*,
/// but treecc limits us to this hack.
%operation void* expr_build_generic (expression * self) = { NULL }


stmt_build_generic (stmt_dummy)
{
  return stmt_dummy_build_generic (self);
}

stmt_build_generic (stmt_assign)
{
  return stmt_assign_build_generic (self);
}

stmt_build_generic (stmt_call)
{
  return stmt_call_build_generic (self);
}

stmt_build_generic (container)
{
  return stmt_container_build_generic (self);
}



expr_build_generic (expr_int)
{
  return expr_int_build_generic (self);
}

expr_build_generic (expr_real)
{
  return expr_real_build_generic (self);
}

expr_build_generic (expr_string)
{
  return expr_string_build_generic (self);
}

expr_build_generic (expr_bool)
{
  return expr_bool_build_generic (self);
}

expr_build_generic (expr_idref)
{
  return expr_idref_build_generic (self);
}

expr_build_generic (expr_if)
{
  return expr_if_build_generic (self);
}

expr_build_generic (expr_arith)
{
  return expr_arith_build_generic (self);
}

expr_build_generic (expr_rel)
{
  return expr_rel_build_generic (self);
}

expr_build_generic (expr_log)
{
  return expr_log_build_generic (self);
}

expr_build_generic (expr_un)
{
  return expr_un_build_generic (self);
}

expr_build_generic (expr_call)
{
  return expr_call_build_generic (self);
}


/*
 * Local Variables:
 * mode: c
 * c-syntactic-indentation: nil
 * End:
 */
