\input texinfo @c -*-texinfo-*-

@c portions of this manual are cut'n'pasted from Fortran and Treelang
@c info pages.

@c %**start of header

@setfilename ga60.info
@set copyrights-ga60 2006

@settitle The GCC Algol 60 Compiler

@c Create a separate index for command line options
@defcodeindex op
@c Merge the standard indexes into a single one.
@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex tp cp

@c %**end of header


@c @@TODO this will change once we get it under GNU, if at all
@copying
Copyright @copyright{} @value{copyrights-ga60} Petr Machata

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover
texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
@end copying


@ifinfo
@dircategory Software development
@direntry
* ga60: (ga60).                  The GCC Algol 60 Compiler.
@end direntry
This file documents the use and the internals of
the GCC Algol 60 compiler, (@command{ga60}).

Published by the Free Software Foundation
51 Franklin Street, Fifth Floor
Boston, MA 02110-1301 USA

@insertcopying
@end ifinfo


@node Top
@top Introduction
@cindex Introduction

This manual documents the use of @command{ga60}, the GCC Algol 60
compiler. You can find in this manual how to invoke @command{ga60}, as
well as its features and incompatibilities.

@ifset DEVELOPMENT
@emph{Warning:} This document, and the compiler it describes, are still
under development.  While efforts are made to keep it up-to-date, it might
not accurately reflect the status of the most recent @command{ga60}.
@end ifset


@menu
* Getting Started::      What you should know about @command{ga60}.
* GA60 and GCC::         You can compile Algol 60, C, or other programs.
* Invoking GA60::        Command options supported by @command{ga60}.
* Project Status::       Status of @command{ga60}, roadmap, proposed extensions.
* Standards and Extensions::
                         Standards supported and extensions implemented by @command{ga60}.
* Intrinsic Procedures:: Intrinsic procedures supported by @command{ga60}
* Copying::              GNU General Public License says
                         how you can copy and share GCC Algol 60.
* GNU Free Documentation License::
		         How you can copy and share this manual.
* Funding::              How to help assure continued work for free software.
* Index::                Index of this documentation.
@end menu



@c ---------------------------------------------------------------------
@c Getting Started
@c ---------------------------------------------------------------------

@node Getting Started
@chapter Getting Started

GCC Algol 60 is the Algol60 compiler front end.  It's written as a
means of investigation of GCC internals, in an attempt to write a GCC
frontend implementer's howto.  Besides this, it can be used as actual
Algol 60 compiler. @command{ga60} is the command you'll use to invoke
the compiler.

GCC Algol 60 is still in an early state of development.  It can
generate code for few constructs, but most of the language is left
unsupported at this moment.

When @command{ga60} is finished, it will do everything you expect from
any decent compiler:

@itemize @bullet
@item
Read a user's program, stored in a file and containing instructions
written in Algol 60.  This file contains @dfn{source code}.

@item
Translate the user's program into instructions a computer can carry
out more quickly than it takes to translate the instructions in the
first place.  The result after compilation of a program is
@dfn{machine code}, code designed to be efficiently translated and
processed by a machine such as your computer.  Humans usually aren't
as good writing machine code as they are at writing Algol 60 (or C++,
Ada, or Java), because is easy to make tiny mistakes writing machine
code.

@item
Provide the user with information about the reasons why the compiler
is unable to create a binary from the source code.  Usually this will
be the case if the source code is flawed.  When writing Algol 60, it
is easy to make big mistakes.  The Algol 60 requires that the compiler
can point out mistakes to the user.  An incorrect usage of the
language causes an @dfn{error message}.

The compiler will also attempt to diagnose cases where the user's
program contains a correct usage of the language, but instructs the
computer to do something questionable.  This kind of diagnostics
message is called a @dfn{warning message}.

@item
Provide optional information about the translation passes from the
source code to machine code.  This can help a user of the compiler to
find the cause of certain bugs which may not be obvious in the source
code, but may be more easily found at a lower level compiler output.
It also helps developers to find bugs in the compiler itself.

@item
Provide information in the generated machine code that can make it
easier to find bugs in the program (using a debugging tool, called a
@dfn{debugger}, such as the GNU Debugger @command{gdb}).

@item
Locate and gather machine code already generated to perform actions
requested by statements in the user's program.  This machine code is
organized into @dfn{modules} and is located and @dfn{linked} to the
user program.

@end itemize

GCC Algol 60 consists of several components:

@itemize @bullet
@item
A version of the @command{gcc} command (which also might be installed
as the system's @command{cc} command) that also understands and
accepts Algol 60 source code.  The @command{gcc} command is the
@dfn{driver} program for all the languages in the GNU Compiler
Collection (GCC); With @command{gcc}, you can compile the source code
of any language for which a front end is available in GCC.

@item
The @command{ga60} command itself.  @command{ga60} is just another
driver program, but specifically for the Algol 60 compiler only.  The
difference with @command{gcc} is that @command{ga60} will
automatically link the correct libraries to your program.

@item
A collection of run-time libraries.  These libraries contain the
machine code needed to support capabilities of the Algol 60 language
that are not directly provided by the machine code generated by the
@command{ga60} compilation phase, such as intrinsic functions and
subroutines, and routines for interaction with files and the operating
system.
@c @@TODO: this actually isn't true yet.

@item
The Algol 60 compiler itself, (@command{algol601}).  This is the Algol
60 parser and code generator, linked to and interfaced with the GCC
backend library.  @command{algol601} ``translates'' the source code to
assembler code.  You would typically not use this program directly;
instead, the @command{gcc} or @command{ga60} driver programs will
call it for you.
@end itemize



@c ---------------------------------------------------------------------
@c GA60 and GCC
@c ---------------------------------------------------------------------

@node GA60 and GCC
@chapter GA60 and GCC
@cindex GNU Compiler Collection

GCC used to be the GNU ``C'' Compiler, but is now known as the
@dfn{GNU Compiler Collection}.  GCC provides the GNU system with a
very versatile compiler middle end (shared optimization passes), and
back ends (code generators) for many different computer architectures
and operating systems.  The code of the middle end and back end are
shared by all compiler front ends that are in the GNU Compiler
Collection.

A GCC front end is essentially a source code parser and an
intermediate code generator.  The code generator translates the
semantics of the source code into a language independent form called
@dfn{GENERIC}.

The parser takes a source file written in a particular computer
language, reads and parses it, and tries to make sure that the source
code conforms to the language rules.  Once the correctness of a
program has been established, the compiler will build a data structure
known as the @dfn{Abstract Syntax tree}, or just @dfn{AST} or ``tree''
for short.  This data structure represents the whole program or a
subroutine or a function.  The ``tree'' is passed to the GCC middle
end, which will perform optimization passes on it.  The optimized AST
is then handed off to the back end which assembles the program unit.

Different phases in this translation process can be, and in fact
@emph{are} merged in many compiler front ends.  GCC Algol 60 has a
strict separation between the parser and code generator.

The goal of the GCC Algol 60 project is to build a new front end for
GCC.  Specifically, an Algol 60 front end.  In a non-ga60
installation, @command{gcc} will not be able to compile Algol 60
source code (only the ``C'' front end has to be compiled if you want
to build GCC, all other languages are optional).  If you build GCC
with GCC Algol 60, @command{gcc} will recognize @file{.a60} source
files and accepts Algol 60 specific command line options.


@node Invoking GA60
@chapter GCC Algol 60 Command Options
@cindex GCC Algol 60 command options
@cindex command options
@cindex options, GCC Algol 60 command

@c man begin DESCRIPTION

The @command{ga60} command supports all the options supported by the
@command{gcc} command.  Only options specific to ga60 are documented
here.

@xref{Invoking GCC,,GCC Command Options,gcc,Using the GNU Compiler
Collection (GCC)}, for information on the non-Algol-specific aspects
of the @command{gcc} command (and, therefore, the @command{ga60}
command).

@cindex options, negative forms
@cindex negative forms of options
All @command{gcc} and @command{ga60} options are accepted both by
@command{ga60} and by @command{gcc} (as well as any other drivers
built at the same time, such as @command{g++}), since adding
@command{ga60} to the @command{gcc} distribution enables acceptance of
@command{ga60} options by all of the relevant drivers.

In some cases, options have positive and negative forms; the negative
form of @option{-ffoo} would be @option{-fno-foo}.  This manual
documents only one of these two forms, whichever one is not the
default.
@c man end

@menu
* Option Summary::        Brief list of all @command{ga60} options,
                          without explanations.
* Environment Variables:: Env vars that affect GCC Algol 60.
@end menu

@node Option Summary
@section Option Summary

@c man begin OPTIONS

Here is a summary of all the options specific to GCC Algol 60, grouped
by type.  Explanations are in the following sections.

Actually it's nothing there, because ga60 doesn't support any extra
options as of yet.

@c man end

@node Environment Variables
@section Environment Variables Affecting GCC Algol 60
@cindex environment variables

@c man begin ENVIRONMENT

GCC Algol 60 currently does not make use of any environment variables
to control its operation above and beyond those that affect the
operation of @command{gcc}.

@xref{Environment Variables,,Environment Variables Affecting GCC,
gcc,Using the GNU Compiler Collection (GCC)}, for information on
environment variables.

@c man end


@c ---------------------------------------------------------------------
@c Project Status
@c ---------------------------------------------------------------------

@node Project Status
@chapter Project Status

GCC Algol 60 is in very early stage.  It's not even able to parse all
constructs, and it only generates code for a part of what it parses.

@table @emph
@item Parsing library

This is the part of ga60, that takes care of the Algol 60 language:
its parsing and validation.
@c @@TODO write what's the status of this

@item Middle end interface

These are the parts of ga60 that take the parse tree generated by the
parsing library and translate it to the GENERIC form required by the
GCC back end.
@c @@TODO write what's the status of this

@end table


@c ---------------------------------------------------------------------
@c Standards and Extensions
@c ---------------------------------------------------------------------

@node Standards and Extensions
@chapter Standards and Extensions
@cindex Standards and Extension

GCC Algol 60 aims to support RRA60.  Among the planned extensions is
support for structures, because the author wants to cover this theme
in his work, and more arcane GCC magic, such as __attributes__, inline
assembly, etc.  Let's see what's going to be done in time.


@c ---------------------------------------------------------------------
@c Intrinsic Procedures
@c ---------------------------------------------------------------------

@node Intrinsic Procedures
@chapter Intrinsic Procedures
@cindex Intrinsic Procedures

@menu
* @code{EXIT}:          EXIT,      Exit the program with status.
@end menu


@node EXIT
@section @code{EXIT} --- Exit the program with status. 
@findex @code{EXIT}
@cindex exit

@table @asis
@item @emph{Description}:
@code{EXIT} causes immediate termination of the program with status.

@item @emph{Standard}:
GNU extension

@item @emph{Syntax}:
@code{'procedure' exit(status);
'value' status;
'integer' status;}

@item @emph{Arguments}:
@multitable @columnfractions .15 .80
@item @var{status} @tab The exit status that is returned to the environment.
@end multitable

@item @emph{Return value}:
This procedure never returns.

@item @emph{Example}:
@smallexample
'begin'
  'integer' a;
  a := 6;
  exit (a);
'end';
@end smallexample
@end table


@c ---------------------------------------------------------------------
@c GNU General Public License
@c ---------------------------------------------------------------------

@include gpl.texi



@c ---------------------------------------------------------------------
@c GNU Free Documentation License
@c ---------------------------------------------------------------------

@include fdl.texi



@c ---------------------------------------------------------------------
@c Funding Free Software
@c ---------------------------------------------------------------------

@include funding.texi

@c ---------------------------------------------------------------------
@c Index
@c ---------------------------------------------------------------------

@node Index
@unnumbered Index

@printindex cp

@bye
